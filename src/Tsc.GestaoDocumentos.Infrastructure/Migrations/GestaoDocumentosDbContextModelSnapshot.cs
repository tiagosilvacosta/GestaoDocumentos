// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tsc.GestaoDocumentos.Infrastructure.Data;

#nullable disable

namespace Tsc.GestaoDocumentos.Infrastructure.Migrations
{
    [DbContext(typeof(GestaoDocumentosDbContext))]
    partial class GestaoDocumentosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChaveArmazenamento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTipoDocumento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TamanhoArquivo")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoArquivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Versao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDocumento");

                    b.HasIndex("IdOrganizacao", "ChaveArmazenamento")
                        .IsUnique()
                        .HasDatabaseName("IX_Documentos_IdOrganizacao_ChaveArmazenamento");

                    b.HasIndex("IdOrganizacao", "DataUpload")
                        .HasDatabaseName("IX_Documentos_IdOrganizacao_DataUpload");

                    b.HasIndex("IdOrganizacao", "IdTipoDocumento")
                        .HasDatabaseName("IX_Documentos_IdOrganizacao_IdTipoDocumento");

                    b.HasIndex("IdOrganizacao", "Status")
                        .HasDatabaseName("IX_Documentos_IdOrganizacao_Status");

                    b.ToTable("Documentos", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.DocumentoDonoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDocumento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDonoDocumento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdDocumento");

                    b.HasIndex("IdDonoDocumento");

                    b.HasIndex("IdOrganizacao", "IdDocumento", "IdDonoDocumento")
                        .IsUnique()
                        .HasDatabaseName("IX_DocumentoDonoDocumento_IdOrganizacao_IdDocumento_IdDonoDocumento");

                    b.ToTable("DocumentoDonoDocumento", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.DonoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTipoDono")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeAmigavel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDono");

                    b.HasIndex("IdOrganizacao", "IdTipoDono")
                        .HasDatabaseName("IX_DonosDocumento_IdOrganizacao_IdTipoDono");

                    b.HasIndex("IdOrganizacao", "NomeAmigavel")
                        .HasDatabaseName("IX_DonosDocumento_IdOrganizacao_NomeAmigavel");

                    b.ToTable("DonosDocumento", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PermiteMultiplosDocumentos")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganizacao", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposDocumento_IdOrganizacao_Nome");

                    b.ToTable("TiposDocumento", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDono", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganizacao", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_TiposDono_IdOrganizacao_Nome");

                    b.ToTable("TiposDono", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDonoTipoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTipoDocumento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTipoDono")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDocumento");

                    b.HasIndex("IdTipoDono");

                    b.HasIndex("IdOrganizacao", "IdTipoDono", "IdTipoDocumento")
                        .IsUnique()
                        .HasDatabaseName("IX_TipoDonoTipoDocumento_IdOrganizacao_IdTipoDono_IdTipoDocumento");

                    b.ToTable("TipoDonoTipoDocumento", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Logs.LogAuditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DadosAnteriores")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DadosNovos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataHoraOperacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntidadeAfetada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IdEntidade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpUsuario")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("Operacao")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("IdOrganizacao", "DataHoraOperacao")
                        .HasDatabaseName("IX_LogsAuditoria_IdOrganizacao_DataHoraOperacao");

                    b.HasIndex("IdOrganizacao", "IdUsuario")
                        .HasDatabaseName("IX_LogsAuditoria_IdOrganizacao_IdUsuario");

                    b.HasIndex("IdOrganizacao", "Operacao")
                        .HasDatabaseName("IX_LogsAuditoria_IdOrganizacao_Operacao");

                    b.HasIndex("IdOrganizacao", "EntidadeAfetada", "IdEntidade")
                        .HasDatabaseName("IX_LogsAuditoria_IdOrganizacao_EntidadeAfetada_EntidadeId");

                    b.ToTable("LogsAuditoria", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataExpiracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomeOrganizacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioUltimaAlteracao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NomeOrganizacao")
                        .HasDatabaseName("IX_Tenants_NomeOrganizacao");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Slug");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Tenants_Status");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimoAcesso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganizacao", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Usuarios_IdOrganizacao_Email");

                    b.HasIndex("IdOrganizacao", "Login")
                        .IsUnique()
                        .HasDatabaseName("IX_Usuarios_IdOrganizacao_Login");

                    b.HasIndex("IdOrganizacao", "Perfil")
                        .HasDatabaseName("IX_Usuarios_IdOrganizacao_Perfil");

                    b.HasIndex("IdOrganizacao", "Status")
                        .HasDatabaseName("IX_Usuarios_IdOrganizacao_Status");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.Documento", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Organizacao")
                        .WithMany()
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.TipoDocumento", "TipoDocumento")
                        .WithMany("Documentos")
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacao");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.DocumentoDonoDocumento", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.Documento", "Documento")
                        .WithMany("DonosVinculados")
                        .HasForeignKey("IdDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.DonoDocumento", "DonoDocumento")
                        .WithMany("DocumentosVinculados")
                        .HasForeignKey("IdDonoDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("DonoDocumento");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.DonoDocumento", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Organizacao")
                        .WithMany("DonosDocumento")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.TipoDono", "TipoDono")
                        .WithMany("DonosDocumento")
                        .HasForeignKey("IdTipoDono")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizacao");

                    b.Navigation("TipoDono");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDocumento", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Tenant")
                        .WithMany("TiposDocumento")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDono", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Tenant")
                        .WithMany("TiposDono")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDonoTipoDocumento", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.TipoDocumento", "TipoDocumento")
                        .WithMany("TiposDonoVinculados")
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tsc.GestaoDocumentos.Domain.Documentos.TipoDono", "TipoDono")
                        .WithMany("TiposDocumentoVinculados")
                        .HasForeignKey("IdTipoDono")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoDono");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Logs.LogAuditoria", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Tenant")
                        .WithMany()
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tsc.GestaoDocumentos.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Usuarios.Usuario", b =>
                {
                    b.HasOne("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", "Organizacao")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizacao");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.Documento", b =>
                {
                    b.Navigation("DonosVinculados");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.DonoDocumento", b =>
                {
                    b.Navigation("DocumentosVinculados");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDocumento", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("TiposDonoVinculados");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Documentos.TipoDono", b =>
                {
                    b.Navigation("DonosDocumento");

                    b.Navigation("TiposDocumentoVinculados");
                });

            modelBuilder.Entity("Tsc.GestaoDocumentos.Domain.Organizacoes.Organizacao", b =>
                {
                    b.Navigation("DonosDocumento");

                    b.Navigation("TiposDocumento");

                    b.Navigation("TiposDono");

                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
